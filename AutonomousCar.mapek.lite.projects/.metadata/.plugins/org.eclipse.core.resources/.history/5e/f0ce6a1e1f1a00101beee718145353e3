package autonomouscar.mapek.lite.adaptation.resources;

import org.osgi.framework.BundleContext;

import es.upv.pros.tatami.adaptation.mapek.lite.ARC.structures.systemconfiguration.interfaces.IRuleComponentsSystemConfiguration;
import es.upv.pros.tatami.adaptation.mapek.lite.artifacts.components.AdaptationRule;
import es.upv.pros.tatami.adaptation.mapek.lite.artifacts.interfaces.IKnowledgeProperty;
import es.upv.pros.tatami.adaptation.mapek.lite.exceptions.analyzing.RuleException;
import es.upv.pros.tatami.adaptation.mapek.lite.helpers.BasicMAPEKLiteLoopHelper;
import es.upv.pros.tatami.adaptation.mapek.lite.helpers.SystemConfigurationHelper;
import es.upv.pros.tatami.adaptation.mapek.lite.structures.systemconfiguration.interfaces.IRuleSystemConfiguration;
import es.upv.pros.tatami.osgi.utils.interfaces.ITimeStamped;
import es.upv.pros.tatami.osgi.utils.logger.SmartLogger;

public class InteraccionAsientoAdaptationRule extends AdaptationRule {
	
	protected static SmartLogger logger = SmartLogger.getLogger(InteraccionAsientoAdaptationRule.class);
	public static String ID = "Regla Interaccion Asiento";
	
	IKnowledgeProperty kp_modo_conduccion = null;
	IKnowledgeProperty kp_estado_asiento = null;	
	
	public InteraccionAsientoAdaptationRule(BundleContext context) {
		super(context, ID);
		this.setListenToKnowledgePropertyChanges("ModoConduccion");
		this.setListenToKnowledgePropertyChanges("EstadoAsiento");

		kp_modo_conduccion = BasicMAPEKLiteLoopHelper.getKnowledgeProperty("ModoConduccion");
		kp_estado_asiento = BasicMAPEKLiteLoopHelper.getKnowledgeProperty("EstadoAsiento");
	}

	@Override
	public boolean checkAffectedByChange(IKnowledgeProperty property) {
		
		if (kp_modo_conduccion == null || kp_estado_asiento == null) {
			logger.trace("Required Knowledge property not set. Not executing the rule ...");
			return false;
		}
		return true;
	}
	
	@Override
	public IRuleSystemConfiguration onExecute(IKnowledgeProperty property) throws RuleException {
		
		String modoConduccion = null;
		if ( kp_modo_conduccion.getValue() != null ) {
			
			modoConduccion = (String) kp_modo_conduccion.getValue();
		} else {
			logger.trace("FranjaDia NULL! Not executing the rule ...");
			throw new RuleException("FranjaDia null value!", "Not executing the rule ...");		
		}
		
		String estadoAsiento = null;
		if ( kp_estado_asiento.getValue() != null ) {
			estadoAsiento = (String) kp_estado_asiento.getValue();
		} else {
			logger.trace("ModoAuto NULL! Not executing the rule ...");
			throw new RuleException("ModoAuto NULL!", "Not executing the rule ...");
		}

		if ( modoConduccion.equals("3") && estadoAsiento.equals("True") ) {
			
			return this.configuracionSistemaActivarControlTrafficJamChauffer();
						
		} else {
			logger.trace("Cannot understand knowledge property value. Not executing the rule ...");
			throw new RuleException("Unknown property value",
					"Cannot understand knowledge property value. Not executing the rule ...");
		}
	}
	
	protected IRuleComponentsSystemConfiguration configuracionSistemaActivarControlTrafficJamChauffer() {
		// Activamos el controlador de trafico
		IRuleComponentsSystemConfiguration theNextSystemConfiguration = SystemConfigurationHelper.createPartialSystemConfiguration(this.getId() + "_" + ITimeStamped.getCurrentTimeStamp());

		// Agregamos el controlador de trafico
		SystemConfigurationHelper.componentToAdd(theNextSystemConfiguration, "driving.L3.CityChauffer", "1.0.0");
		SystemConfigurationHelper.componentToRemove(theNextSystemConfiguration, "driving.L3.HighwayChauffer", "1.0.0");
		SystemConfigurationHelper.componentToRemove(theNextSystemConfiguration, "driving.L3.TrafficJamChauffer", "1.0.0");

		return theNextSystemConfiguration;		
		
	}
	
}
